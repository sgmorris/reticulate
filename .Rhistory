library(reticulate)
# Install miniconda (one time)
install_miniconda()
py_install("datetime")
help("use_virtualenv")
help("virtualenv_create")
help(conda_install)
help(py_install)
conda_install(packages="datetime")
py_install("pandas")
#
py_install("datetime")
#
py_install("calendar")
#
use_virtualenv("r-reticulate")
#
virtualenv_create("my-proj")
py_install("datetime", envname="my-proj")
use_virtualenv("my-proj")
datetime <- import("datetime")
# Package load ------------------------------------------------------------
library(reticulate)
help("conda_install")
conda_install(packages="datetime")
#
py_install("pandas")
# should be via py_install.
# this works and
py_install("pandas")
# should be
py_install("datetime")
# Package load ------------------------------------------------------------
library(reticulate)
use_condaenv("r-reticulate")
py_config()
py_discover_config()
args(conda_install)
conda_install(envname="r-reticulate", packages="datetime")
help("py_install")
py_install(envname="r-reticulate", packages="datetime")
py_install(envname="r-reticulate", packages="datetime", pip=TRUE)
# now import the modules to the R environment
datetime <- import("datetime")
pandas <- import("pandas")
py_install(envname="r-reticulate", packages="pandas", pip=TRUE)
pandas <- import("pandas")
# now can acces the functions in the modules via "$"
datetime$date(2001, 10, 12)
# now can acces the functions in the modules via "$"
datetime$date(as.integer(2001), as.integer(10), as.integer(12))
help(import)
# now can access the functions in the modules via "$"
# eg date function converts arguments to a date class
# note force to integer class from the R end
testdate <- datetime$date(as.integer(2001:2010), as.integer(10), as.integer(12))
# now can access the functions in the modules via "$"
# eg date function converts arguments to a date class
# note force to integer class from the R end
testdate <- datetime$date(as.integer(2001), as.integer(10), as.integer(12))
str(testdate)
testdate
str(testdate)
testdate-1
# and you can specify which python to use via
# use_python() or set the environment variable RETICULATE_PYTHON
# discover what's available
py_discover_config()
# create a series via pandas Series()
myseq <- pandas$Series([1,2,3,4])
# create a series via pandas Series()
myseq <- pandas$Series(1,2,3,4)
# create a series via pandas Series()
myseq <- pandas$Series(c(1,2,3,4))
myseq
py_install(envname="r-reticulate", packages="numpy", pip=TRUE)
numpy <- import("numpy")
numpy$random$normal(loc=0, scale=1, size=100)
numpy$random$normal(loc=0, scale=1, size=integer(100))
# create a series via pandas Series()
myseq <- numpy$random$random_sample(size=integer(10))
myseq
# create a series via pandas Series()
myseq <- numpy$random$random_sample(size=10)
library(lubridate)
# or send date object from R to the datetime utilities
mydate <- seq(ymd("2000-01-01"), ymd("2010-01-01"), by="2 months")
mydate
str(mydate)
datetime$date$strftime(mydate, format="%A %d. %B %Y")
datetime$date$strftime(mydate[1], format="%A %d. %B %Y")
datetime$date$strftime(mydate[1], format="%A %d. %B %Y")
datetime$date$strftime(mydate[1], format="%A %d. %B %Y")
library(reticulate)
library(lubridate)
datetime <- import("datetime")
pandas <- import("pandas")
numpy <- import("numpy")
# now can access the functions in the modules via "$"
# eg date function converts arguments to a date class
# note force arguments to integer class from the R end
testdate <- datetime$date(as.integer(2001), as.integer(10), as.integer(12))
source_python("adding.py")
add
add(1,2)
add(x=10, y=3)
dd <- add(x=10, y=3)
dd
str(dd)
dd <- 13
str(dd)
# this script defines a function "add" with 2 arguments x, y
source_python("adding.py", convert=FALSE)
add
dd <- add(x=10, y=3)
dd
